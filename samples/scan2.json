{
  "id": "8001c795-c694-41e6-b119-bb60ade36fcf",
  "projects": null,
  "createdAt": "2023-12-29T18:58:07.852605879Z",
  "startedAt": "0001-01-01T00:00:00Z",
  "createdBy": {
    "serviceAccount": {
      "id": "wgxq75hrlndpbktx3eupevf2x3hhkiilwmnvzvmbmc3is5qkntuxg"
    }
  },
  "status": {
    "state": "SUCCESS",
    "verdict": "FAILED_BY_POLICY"
  },
  "policies": [
    {
      "id": "e7890e79-7645-444f-b359-ffc4d1a6cd21",
      "name": "Default secrets policy",
      "description": "Default built-in policy for secret scanning",
      "type": "SECRETS",
      "builtin": true,
      "projects": null,
      "policyLifecycleEnforcements": [
        {
          "enforcementMethod": "AUDIT",
          "deploymentLifecycle": "ADMISSION_CONTROLLER"
        },
        {
          "enforcementMethod": "AUDIT",
          "deploymentLifecycle": "CLI"
        }
      ],
      "ignoreRules": null,
      "params": {
        "__typename": "cicdscanpolicyparamssecrets",
        "countThreshold": 1,
        "pathAllowList": []
      }
    },
    {
      "id": "ad519454-72e6-438f-8c01-1d2e14a161c3",
      "name": "Default vulnerabilities policy",
      "description": "Default built-in policy",
      "type": "VULNERABILITIES",
      "builtin": true,
      "projects": null,
      "policyLifecycleEnforcements": [
        {
          "enforcementMethod": "AUDIT",
          "deploymentLifecycle": "ADMISSION_CONTROLLER"
        },
        {
          "enforcementMethod": "BLOCK",
          "deploymentLifecycle": "CLI"
        }
      ],
      "ignoreRules": null,
      "params": {
        "__typename": "cicdscanpolicyparamsvulnerabilities",
        "severity": "CRITICAL",
        "packageCountThreshold": 1,
        "ignoreUnfixed": true,
        "packageAllowList": [],
        "detectionMethods": null,
        "fixGracePeriodHours": 0,
        "publishGracePeriodHours": 0
      }
    }
  ],
  "extraInfo": null,
  "tags": null,
  "outdatedPolicies": [],
  "taggedResource": null,
  "scanOriginResource": {
    "__typename": "CICDScanOriginDirectory",
    "name": "/tmp/scandir"
  },
  "result": {
    "__typename": "CICDDiskScanResult",
    "osPackages": null,
    "libraries": [
      {
        "name": "github.com/containerd/containerd",
        "version": "1.6.12",
        "path": "/tl-scanner",
        "vulnerabilities": [
          {
            "name": "CVE-2023-25153",
            "severity": "MEDIUM",
            "fixedVersion": "1.6.18",
            "source": "https://nvd.nist.gov/vuln/detail/CVE-2023-25153",
            "description": "containerd is an open source container runtime. Before versions 1.6.18 and 1.5.18, when importing an OCI image, there was no limit on the number of bytes read for certain files. A maliciously crafted image with a large file where a limit was not applied could cause a denial of service. This bug has been fixed in containerd 1.6.18 and 1.5.18.  Users should update to these versions to resolve the issue. As a workaround, ensure that only trusted images are used and that only trusted users have permissions to import images.",
            "score": 5.5,
            "exploitabilityScore": 1.8,
            "cvssV3Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "LOCAL",
              "confidentialityImpact": "NONE",
              "integrityImpact": "NONE",
              "privilegesRequired": "NONE",
              "userInteractionRequired": true
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": null,
            "epssPercentile": 8.2,
            "epssSeverity": "LOW",
            "publishDate": "2023-02-16T15:15:00Z",
            "fixPublishDate": "2023-06-05T00:00:00Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          },
          {
            "name": "CVE-2023-25173",
            "severity": "MEDIUM",
            "fixedVersion": "1.6.18",
            "source": "https://nvd.nist.gov/vuln/detail/CVE-2023-25173",
            "description": "containerd is an open source container runtime. A bug was found in containerd prior to versions 1.6.18 and 1.5.18 where supplementary groups are not set up properly inside a container. If an attacker has direct access to a container and manipulates their supplementary group access, they may be able to use supplementary group access to bypass primary group restrictions in some cases, potentially gaining access to sensitive information or gaining the ability to execute code in that container. Downstream applications that use the containerd client library may be affected as well.\n\nThis bug has been fixed in containerd v1.6.18 and v.1.5.18. Users should update to these versions and recreate containers to resolve this issue. Users who rely on a downstream application that uses containerd's client library should check that application for a separate advisory and instructions. As a workaround, ensure that the `\"USER $USERNAME\"` Dockerfile instruction is not used. Instead, set the container entrypoint to a value similar to `ENTRYPOINT [\"su\", \"-\", \"user\"]` to allow `su` to properly set up supplementary groups.",
            "score": 7.8,
            "exploitabilityScore": 1.8,
            "cvssV3Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "LOCAL",
              "confidentialityImpact": "HIGH",
              "integrityImpact": "HIGH",
              "privilegesRequired": "LOW",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": 0.1,
            "epssPercentile": 33.1,
            "epssSeverity": "LOW",
            "publishDate": "2023-02-16T15:15:00Z",
            "fixPublishDate": "2023-06-05T00:00:00Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          },
          {
            "name": "GHSA-7ww5-4wqc-m92c",
            "severity": "MEDIUM",
            "fixedVersion": "1.6.26",
            "source": "https://github.com/advisories/GHSA-7ww5-4wqc-m92c",
            "description": "# /sys/devices/virtual/powercap accessible by default to containers\nIntel's RAPL (Running Average Power Limit) feature, introduced by the Sandy Bridge microarchitecture, provides software insights into hardware energy consumption. To facilitate this, Intel introduced the powercap framework in Linux kernel 3.13, which reads values via relevant MSRs (model specific registers) and provides unprivileged userspace access via `sysfs`. As RAPL is an interface to access a hardware feature, it is only available when running on bare metal with the module compiled into the kernel.\nBy 2019, it was realized that in some cases unprivileged access to RAPL readings could be exploited as a power-based side-channel against security features including AES-NI (potentially inside a SGX enclave) and KASLR (kernel address space layout randomization). Also known as the [PLATYPUS attack](https://platypusattack.com/), Intel assigned [CVE-2020-8694](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694) and [CVE-2020-8695](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695), and AMD assigned [CVE-2020-12912](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912).\nSeveral mitigations were applied; Intel reduced the sampling resolution via a microcode update, and the Linux kernel [prevents access by non-root users](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71) since 5.10. However, this kernel-based mitigation does not apply to many container-based scenarios:\n* Unless using user namespaces, root inside a container has the same level of privilege as root outside the container, but with a slightly more narrow view of the system\n* `sysfs` is mounted inside containers read-only; however only read access is needed to carry out this attack on an unpatched CPU\nWhile this is not a direct vulnerability in container runtimes, defense in depth and safe defaults are valuable and preferred, especially as this poses a risk to multi-tenant container environments. This is provided by masking `/sys/devices/virtual/powercap` in the default mount configuration, and adding an additional set of rules to deny it in the default AppArmor profile.\nWhile `sysfs` is not the only way to read from the RAPL subsystem, other ways of accessing it require additional capabilities such as `CAP_SYS_RAWIO` which is not available to containers by default, or `perf` paranoia level less than 1, which is a non-default kernel tunable.\n## References\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912\n* https://platypusattack.com/\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71\n* https://web.eece.maine.edu/~vweaver/projects/rapl/",
            "score": null,
            "exploitabilityScore": null,
            "cvssV3Metrics": null,
            "cvssV2Metrics": null,
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": null,
            "epssPercentile": null,
            "epssSeverity": "NONE",
            "publishDate": "2023-12-19T21:17:00Z",
            "fixPublishDate": "2023-12-20T02:28:05Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          }
        ],
        "detectionMethod": "LIBRARY",
        "layerMetadata": null,
        "failedPolicyMatches": []
      },
      {
        "name": "github.com/cyphar/filepath-securejoin",
        "version": "0.2.3",
        "path": "/tl-scanner",
        "vulnerabilities": [
          {
            "name": "GHSA-6xv5-86q9-7xr8",
            "severity": "MEDIUM",
            "fixedVersion": "0.2.4",
            "source": "https://github.com/advisories/GHSA-6xv5-86q9-7xr8",
            "description": "### Impact\nFor Windows users of `github.com/cyphar/filepath-securejoin`, until v0.2.4 it was possible for certain rootfs and path combinations (in particular, where a malicious Unix-style `/`-separated unsafe path was used with a Windows-style rootfs path) to result in generated paths that were outside of the provided rootfs.\nIt is unclear to what extent this has a practical impact on real users, but given the possible severity of the issue we have released an emergency patch release that resolves this issue.\nThanks to  @pjbgf for discovering, debugging, and fixing this issue (as well as writing some tests for it).\n### Patches\nc121231e1276e11049547bee5ce68d5a2cfe2d9b is the patch fixing this issue. v0.2.4 contains the fix.\n### Workarounds\nUsers could use `filepath.FromSlash()` on all unsafe paths before passing them to `filepath-securejoin`.\n### References\nSee #9.",
            "score": null,
            "exploitabilityScore": null,
            "cvssV3Metrics": null,
            "cvssV2Metrics": null,
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": null,
            "epssPercentile": null,
            "epssSeverity": "NONE",
            "publishDate": "2023-09-07T12:58:00Z",
            "fixPublishDate": "2023-09-07T20:37:02Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          }
        ],
        "detectionMethod": "LIBRARY",
        "layerMetadata": null,
        "failedPolicyMatches": []
      },
      {
        "name": "github.com/docker/distribution",
        "version": "2.8.1+incompatible",
        "path": "/tl-scanner",
        "vulnerabilities": [
          {
            "name": "CVE-2023-2253",
            "severity": "HIGH",
            "fixedVersion": "2.8.2-beta.1",
            "source": "https://github.com/advisories/GHSA-hqxw-f8mx-cpmw",
            "description": "A flaw was found in the `/v2/_catalog` endpoint in distribution/distribution, which accepts a parameter to control the maximum number of records returned (query string: `n`). This vulnerability allows a malicious user to submit an unreasonably large value for `n,` causing the allocation of a massive string array, possibly causing a denial of service through excessive use of memory.",
            "score": 6.5,
            "exploitabilityScore": 2.8,
            "cvssV3Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "NETWORK",
              "confidentialityImpact": "NONE",
              "integrityImpact": "NONE",
              "privilegesRequired": "LOW",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": null,
            "epssPercentile": 11,
            "epssSeverity": "LOW",
            "publishDate": "2023-06-06T20:15:00Z",
            "fixPublishDate": "2023-06-05T00:00:00Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          }
        ],
        "detectionMethod": "LIBRARY",
        "layerMetadata": null,
        "failedPolicyMatches": []
      },
      {
        "name": "github.com/docker/docker",
        "version": "20.10.17+incompatible",
        "path": "/tl-scanner",
        "vulnerabilities": [
          {
            "name": "CVE-2023-28841",
            "severity": "MEDIUM",
            "fixedVersion": "20.10.24",
            "source": "https://github.com/advisories/GHSA-33pg-m6jh-5237",
            "description": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with the VXLAN metadata, including a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nAn iptables rule designates outgoing VXLAN datagrams with a VNI that corresponds to an encrypted overlay network for IPsec encapsulation.\n\nEncrypted overlay networks on affected platforms silently transmit unencrypted data. As a result, `overlay` networks may appear to be functional, passing traffic as expected, but without any of the expected confidentiality or data integrity guarantees.\n\nIt is possible for an attacker sitting in a trusted position on the network to read all of the application traffic that is moving across the overlay network, resulting in unexpected secrets or user data disclosure. Thus, because many database protocols, internal APIs, etc. are not protected by a second layer of encryption, a user may use Swarm encrypted overlay networks to provide confidentiality, which due to this vulnerability this is no longer guaranteed.\n\nPatches are available in Moby releases 23.0.3, and 20.10.24. As Mirantis Container Runtime's 20.10 releases are numbered differently, users of that platform should update to 20.10.16.\n\nSome workarounds are available. Close the VXLAN port (by default, UDP port 4789) to outgoing traffic at the Internet boundary in order to prevent unintentionally leaking unencrypted traffic over the Internet, and/or ensure that the `xt_u32` kernel module is available on all nodes of the Swarm cluster.",
            "score": 6.8,
            "exploitabilityScore": 2.2,
            "cvssV3Metrics": {
              "attackComplexity": "HIGH",
              "attackVector": "NETWORK",
              "confidentialityImpact": "HIGH",
              "integrityImpact": "NONE",
              "privilegesRequired": "NONE",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": true,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": 0.2,
            "epssPercentile": 54.6,
            "epssSeverity": "MEDIUM",
            "publishDate": "2023-04-04T22:15:00Z",
            "fixPublishDate": "2023-06-05T00:00:00Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          },
          {
            "name": "CVE-2023-28840",
            "severity": "HIGH",
            "fixedVersion": "20.10.24",
            "source": "https://github.com/advisories/GHSA-232p-vwff-86mp",
            "description": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby, is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in dockerd and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe overlay network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the u32 iptables extension provided by the xt_u32 kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nTwo iptables rules serve to filter incoming VXLAN datagrams with a VNI that corresponds to an encrypted network and discards unencrypted datagrams. The rules are appended to the end of the INPUT filter chain, following any rules that have been previously set by the system administrator. Administrator-set rules take precedence over the rules Moby sets to discard unencrypted VXLAN datagrams, which can potentially admit unencrypted datagrams that should have been discarded.\n\nThe injection of arbitrary Ethernet frames can enable a Denial of Service attack. A sophisticated attacker may be able to establish a UDP or TCP connection by way of the container’s outbound gateway that would otherwise be blocked by a stateful firewall, or carry out other escalations beyond simple injection by smuggling packets into the overlay network.\n\nPatches are available in Moby releases 23.0.3 and 20.10.24. As Mirantis Container Runtime's 20.10 releases are numbered differently, users of that platform should update to 20.10.16.\n\nSome workarounds are available. Close the VXLAN port (by default, UDP port 4789) to incoming traffic at the Internet boundary to prevent all VXLAN packet injection, and/or ensure that the `xt_u32` kernel module is available on all nodes of the Swarm cluster.",
            "score": 8.7,
            "exploitabilityScore": 2.2,
            "cvssV3Metrics": {
              "attackComplexity": "HIGH",
              "attackVector": "NETWORK",
              "confidentialityImpact": "NONE",
              "integrityImpact": "HIGH",
              "privilegesRequired": "NONE",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": true,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": 0.2,
            "epssPercentile": 55.1,
            "epssSeverity": "MEDIUM",
            "publishDate": "2023-04-04T22:15:00Z",
            "fixPublishDate": "2023-06-05T00:00:00Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          },
          {
            "name": "GHSA-jq35-85cj-fj4p",
            "severity": "MEDIUM",
            "fixedVersion": "24.0.7",
            "source": "https://github.com/advisories/GHSA-jq35-85cj-fj4p",
            "description": "Intel's RAPL (Running Average Power Limit) feature, introduced by the Sandy Bridge microarchitecture, provides software insights into hardware energy consumption. To facilitate this, Intel introduced the powercap framework in Linux kernel 3.13, which reads values via relevant MSRs (model specific registers) and provides unprivileged userspace access via `sysfs`. As RAPL is an interface to access a hardware feature, it is only available when running on bare metal with the module compiled into the kernel.\nBy 2019, it was realized that in some cases unprivileged access to RAPL readings could be exploited as a power-based side-channel against security features including AES-NI (potentially inside a SGX enclave) and KASLR (kernel address space layout randomization). Also known as the [PLATYPUS attack](https://platypusattack.com/), Intel assigned [CVE-2020-8694](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694) and [CVE-2020-8695](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695), and AMD assigned [CVE-2020-12912](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912).\nSeveral mitigations were applied; Intel reduced the sampling resolution via a microcode update, and the Linux kernel [prevents access by non-root users](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71) since 5.10. However, this kernel-based mitigation does not apply to many container-based scenarios:\n* Unless using user namespaces, root inside a container has the same level of privilege as root outside the container, but with a slightly more narrow view of the system\n* `sysfs` is mounted inside containers read-only; however only read access is needed to carry out this attack on an unpatched CPU\nWhile this is not a direct vulnerability in container runtimes, defense in depth and safe defaults are valuable and preferred, especially as this poses a risk to multi-tenant container environments running directly on affected hardware. This is provided by masking `/sys/devices/virtual/powercap` in the default mount configuration, and adding an additional set of rules to deny it in the default AppArmor profile.\nWhile `sysfs` is not the only way to read from the RAPL subsystem, other ways of accessing it require additional capabilities such as `CAP_SYS_RAWIO` which is not available to containers by default, or `perf` paranoia level less than 1, which is a non-default kernel tunable.\n## References\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912\n* https://platypusattack.com/\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71\n* https://web.eece.maine.edu/~vweaver/projects/rapl/",
            "score": null,
            "exploitabilityScore": null,
            "cvssV3Metrics": null,
            "cvssV2Metrics": null,
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": null,
            "epssPercentile": null,
            "epssSeverity": "NONE",
            "publishDate": "2023-10-30T15:25:00Z",
            "fixPublishDate": "2023-10-31T10:07:27Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          },
          {
            "name": "CVE-2023-28842",
            "severity": "MEDIUM",
            "fixedVersion": "20.10.24",
            "source": "https://github.com/advisories/GHSA-6wrf-mxfj-pf5p",
            "description": "Moby) is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with the VXLAN metadata, including a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nThe `overlay` driver dynamically and lazily defines the kernel configuration for the VXLAN network on each node as containers are attached and detached. Routes and encryption parameters are only defined for destination nodes that participate in the network. The iptables rules that prevent encrypted overlay networks from accepting unencrypted packets are not created until a peer is available with which to communicate.\n\nEncrypted overlay networks silently accept cleartext VXLAN datagrams that are tagged with the VNI of an encrypted overlay network. As a result, it is possible to inject arbitrary Ethernet frames into the encrypted overlay network by encapsulating them in VXLAN datagrams. The implications of this can be quite dire, and GHSA-vwm3-crmr-xfxw should be referenced for a deeper exploration.\n\nPatches are available in Moby releases 23.0.3, and 20.10.24. As Mirantis Container Runtime's 20.10 releases are numbered differently, users of that platform should update to 20.10.16.\n\nSome workarounds are available. In multi-node clusters, deploy a global ‘pause’ container for each encrypted overlay network, on every node. For a single-node cluster, do not use overlay networks of any sort. Bridge networks provide the same connectivity on a single node and have no multi-node features. The Swarm ingress feature is implemented using an overlay network, but can be disabled by publishing ports in `host` mode instead of `ingress` mode (allowing the use of an external load balancer), and removing the `ingress` network. If encrypted overlay networks are in exclusive use, block UDP port 4789 from traffic that has not been validated by IPSec.",
            "score": 6.8,
            "exploitabilityScore": 2.2,
            "cvssV3Metrics": {
              "attackComplexity": "HIGH",
              "attackVector": "NETWORK",
              "confidentialityImpact": "NONE",
              "integrityImpact": "HIGH",
              "privilegesRequired": "NONE",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": 0.2,
            "epssPercentile": 59.5,
            "epssSeverity": "MEDIUM",
            "publishDate": "2023-04-04T22:15:00Z",
            "fixPublishDate": "2023-06-05T00:00:00Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          }
        ],
        "detectionMethod": "LIBRARY",
        "layerMetadata": null,
        "failedPolicyMatches": []
      },
      {
        "name": "github.com/emicklei/go-restful",
        "version": "2.9.5+incompatible",
        "path": "/tl-scanner",
        "vulnerabilities": [
          {
            "name": "CVE-2022-1996",
            "severity": "CRITICAL",
            "fixedVersion": "2.16.0",
            "source": "https://nvd.nist.gov/vuln/detail/CVE-2022-1996",
            "description": "Authorization Bypass Through User-Controlled Key in GitHub repository emicklei/go-restful prior to v3.8.0.",
            "score": 9.1,
            "exploitabilityScore": 3.9,
            "cvssV3Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "NETWORK",
              "confidentialityImpact": "HIGH",
              "integrityImpact": "HIGH",
              "privilegesRequired": "NONE",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "NETWORK",
              "confidentialityImpact": "PARTIAL",
              "integrityImpact": "PARTIAL",
              "privilegesRequired": "NONE",
              "userInteractionRequired": false
            },
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": 0.2,
            "epssPercentile": 62.4,
            "epssSeverity": "MEDIUM",
            "publishDate": "2022-06-08T13:15:00Z",
            "fixPublishDate": "2023-06-05T00:00:00Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          }
        ],
        "detectionMethod": "LIBRARY",
        "layerMetadata": null,
        "failedPolicyMatches": [
          {
            "policy": {
              "id": "ad519454-72e6-438f-8c01-1d2e14a161c3",
              "name": "Default vulnerabilities policy",
              "description": "Default built-in policy",
              "type": "VULNERABILITIES",
              "builtin": true,
              "projects": null,
              "policyLifecycleEnforcements": [
                {
                  "enforcementMethod": "AUDIT",
                  "deploymentLifecycle": "ADMISSION_CONTROLLER",
                  "enforcementConfig": null
                },
                {
                  "enforcementMethod": "BLOCK",
                  "deploymentLifecycle": "CLI",
                  "enforcementConfig": null
                }
              ],
              "ignoreRules": null,
              "params": {
                "__typename": "cicdscanpolicyparamsvulnerabilities",
                "severity": "CRITICAL",
                "packageCountThreshold": 1,
                "ignoreUnfixed": true,
                "packageAllowList": [],
                "detectionMethods": null,
                "fixGracePeriodHours": 0,
                "publishGracePeriodHours": 0
              }
            }
          }
        ]
      },
      {
        "name": "github.com/opencontainers/runc",
        "version": "1.1.3",
        "path": "/tl-scanner",
        "vulnerabilities": [
          {
            "name": "CVE-2023-27561",
            "severity": "HIGH",
            "fixedVersion": "1.1.5",
            "source": "https://github.com/advisories/GHSA-vpvm-3wq2-2wvm",
            "description": "runc through 1.1.4 has Incorrect Access Control leading to Escalation of Privileges, related to libcontainer/rootfs_linux.go. To exploit this, an attacker must be able to spawn two containers with custom volume-mount configurations, and be able to run custom images. NOTE: this issue exists because of a CVE-2019-19921 regression.",
            "score": 7,
            "exploitabilityScore": 1,
            "cvssV3Metrics": {
              "attackComplexity": "HIGH",
              "attackVector": "LOCAL",
              "confidentialityImpact": "HIGH",
              "integrityImpact": "HIGH",
              "privilegesRequired": "LOW",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": true,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": null,
            "epssPercentile": 5.8,
            "epssSeverity": "LOW",
            "publishDate": "2023-03-03T19:15:00Z",
            "fixPublishDate": "2023-06-05T00:00:00Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          },
          {
            "name": "CVE-2023-25809",
            "severity": "LOW",
            "fixedVersion": "1.1.5",
            "source": "https://github.com/advisories/GHSA-m8cg-xc2p-r3fc",
            "description": "runc is a CLI tool for spawning and running containers according to the OCI specification. In affected versions it was found that rootless runc makes `/sys/fs/cgroup` writable in following conditons: 1. when runc is executed inside the user namespace, and the `config.json` does not specify the cgroup namespace to be unshared (e.g.., `(docker|podman|nerdctl) run --cgroupns=host`, with Rootless Docker/Podman/nerdctl) or 2. when runc is executed outside the user namespace, and `/sys` is mounted with `rbind, ro` (e.g., `runc spec --rootless`; this condition is very rare). A container may gain the write access to user-owned cgroup hierarchy `/sys/fs/cgroup/user.slice/...` on the host . Other users's cgroup hierarchies are not affected. Users are advised to upgrade to version 1.1.5. Users unable to upgrade may unshare the cgroup namespace (`(docker|podman|nerdctl) run --cgroupns=private)`. This is the default behavior of Docker/Podman/nerdctl on cgroup v2 hosts. or add `/sys/fs/cgroup` to `maskedPaths`.",
            "score": 6.3,
            "exploitabilityScore": 2,
            "cvssV3Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "LOCAL",
              "confidentialityImpact": "LOW",
              "integrityImpact": "LOW",
              "privilegesRequired": "LOW",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": true,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": null,
            "epssPercentile": 6.9,
            "epssSeverity": "LOW",
            "publishDate": "2023-03-29T19:15:00Z",
            "fixPublishDate": "2023-06-05T00:00:00Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          },
          {
            "name": "CVE-2023-28642",
            "severity": "MEDIUM",
            "fixedVersion": "1.1.5",
            "source": "https://github.com/advisories/GHSA-g2j6-57v7-gm8c",
            "description": "runc is a CLI tool for spawning and running containers according to the OCI specification. It was found that AppArmor can be bypassed when `/proc` inside the container is symlinked with a specific mount configuration. This issue has been fixed in runc version 1.1.5, by prohibiting symlinked `/proc`. See PR #3785 for details. users are advised to upgrade. Users unable to upgrade should avoid using an untrusted container image.",
            "score": 7.8,
            "exploitabilityScore": 1.8,
            "cvssV3Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "LOCAL",
              "confidentialityImpact": "HIGH",
              "integrityImpact": "HIGH",
              "privilegesRequired": "LOW",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": null,
            "epssPercentile": 6.9,
            "epssSeverity": "LOW",
            "publishDate": "2023-03-29T19:15:00Z",
            "fixPublishDate": "2023-06-05T00:00:00Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          }
        ],
        "detectionMethod": "LIBRARY",
        "layerMetadata": null,
        "failedPolicyMatches": []
      },
      {
        "name": "golang.org/x/crypto",
        "version": "0.0.0-20220622213112-05595931fe9d",
        "path": "/tl-scanner",
        "vulnerabilities": [
          {
            "name": "CVE-2023-48795",
            "severity": "MEDIUM",
            "fixedVersion": "0.17.0",
            "source": "https://github.com/advisories/GHSA-45x7-px36-x8w8",
            "description": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
            "score": null,
            "exploitabilityScore": null,
            "cvssV3Metrics": null,
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": true,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": 1.2,
            "epssPercentile": 83.2,
            "epssSeverity": "HIGH",
            "publishDate": "2023-12-18T16:15:00Z",
            "fixPublishDate": "2023-12-19T02:27:51Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          }
        ],
        "detectionMethod": "LIBRARY",
        "layerMetadata": null,
        "failedPolicyMatches": []
      },
      {
        "name": "golang.org/x/net",
        "version": "0.5.0",
        "path": "/tl-scanner",
        "vulnerabilities": [
          {
            "name": "CVE-2022-41723",
            "severity": "HIGH",
            "fixedVersion": "0.7.0",
            "source": "https://nvd.nist.gov/vuln/detail/CVE-2022-41723",
            "description": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
            "score": 7.5,
            "exploitabilityScore": 3.9,
            "cvssV3Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "NETWORK",
              "confidentialityImpact": "NONE",
              "integrityImpact": "NONE",
              "privilegesRequired": "NONE",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": 1,
            "epssPercentile": 82.2,
            "epssSeverity": "HIGH",
            "publishDate": "2023-02-28T18:15:00Z",
            "fixPublishDate": "2023-06-05T00:00:00Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          },
          {
            "name": "CVE-2023-3978",
            "severity": "MEDIUM",
            "fixedVersion": "0.13.0",
            "source": "https://github.com/advisories/GHSA-2wrh-6pvc-2jm9",
            "description": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
            "score": 6.1,
            "exploitabilityScore": 2.8,
            "cvssV3Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "NETWORK",
              "confidentialityImpact": "LOW",
              "integrityImpact": "LOW",
              "privilegesRequired": "NONE",
              "userInteractionRequired": true
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": 0.1,
            "epssPercentile": 18.2,
            "epssSeverity": "LOW",
            "publishDate": "2023-08-02T20:15:00Z",
            "fixPublishDate": "2023-10-12T00:42:14Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          },
          {
            "name": "CVE-2023-44487",
            "severity": "MEDIUM",
            "fixedVersion": "0.17.0",
            "source": "https://github.com/advisories/GHSA-qppj-fm5r-hxr3",
            "description": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
            "score": 7.5,
            "exploitabilityScore": 3.9,
            "cvssV3Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "NETWORK",
              "confidentialityImpact": "NONE",
              "integrityImpact": "NONE",
              "privilegesRequired": "NONE",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": true,
            "hasCisaKevExploit": true,
            "cisaKevReleaseDate": "2023-10-10T00:00:00Z",
            "cisaKevDueDate": "2023-10-31T00:00:00Z",
            "epssProbability": 64.5,
            "epssPercentile": 97.6,
            "epssSeverity": "CRITICAL",
            "publishDate": "2023-10-10T14:15:00Z",
            "fixPublishDate": "2023-10-16T08:33:38Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          },
          {
            "name": "CVE-2023-39325",
            "severity": "HIGH",
            "fixedVersion": "0.17.0",
            "source": "https://github.com/advisories/GHSA-4374-p667-p6c8",
            "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
            "score": 7.5,
            "exploitabilityScore": 3.9,
            "cvssV3Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "NETWORK",
              "confidentialityImpact": "NONE",
              "integrityImpact": "NONE",
              "privilegesRequired": "NONE",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": 0.3,
            "epssPercentile": 67.1,
            "epssSeverity": "HIGH",
            "publishDate": "2023-10-11T22:15:00Z",
            "fixPublishDate": "2023-10-12T00:42:14Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          }
        ],
        "detectionMethod": "LIBRARY",
        "layerMetadata": null,
        "failedPolicyMatches": []
      },
      {
        "name": "google.golang.org/grpc",
        "version": "1.49.0",
        "path": "/tl-scanner",
        "vulnerabilities": [
          {
            "name": "GHSA-m425-mq94-257g",
            "severity": "HIGH",
            "fixedVersion": "1.56.3",
            "source": "https://github.com/advisories/GHSA-m425-mq94-257g",
            "description": "### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3.  It is also included in the latest release, 1.59.0.\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n### Workarounds\nNone.\n### References\n#6703",
            "score": 7.5,
            "exploitabilityScore": null,
            "cvssV3Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "NETWORK",
              "confidentialityImpact": "NONE",
              "integrityImpact": "NONE",
              "privilegesRequired": "NONE",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": null,
            "hasExploit": false,
            "hasCisaKevExploit": false,
            "cisaKevReleaseDate": null,
            "cisaKevDueDate": null,
            "epssProbability": null,
            "epssPercentile": null,
            "epssSeverity": "NONE",
            "publishDate": "2023-10-25T21:17:00Z",
            "fixPublishDate": "2023-10-26T02:28:41Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          },
          {
            "name": "CVE-2023-44487",
            "severity": "MEDIUM",
            "fixedVersion": "1.56.3",
            "source": "https://github.com/advisories/GHSA-qppj-fm5r-hxr3",
            "description": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
            "score": 7.5,
            "exploitabilityScore": 3.9,
            "cvssV3Metrics": {
              "attackComplexity": "LOW",
              "attackVector": "NETWORK",
              "confidentialityImpact": "NONE",
              "integrityImpact": "NONE",
              "privilegesRequired": "NONE",
              "userInteractionRequired": false
            },
            "cvssV2Metrics": {
              "attackComplexity": null,
              "attackVector": null,
              "confidentialityImpact": null,
              "integrityImpact": null,
              "privilegesRequired": null,
              "userInteractionRequired": false
            },
            "hasExploit": true,
            "hasCisaKevExploit": true,
            "cisaKevReleaseDate": "2023-10-10T00:00:00Z",
            "cisaKevDueDate": "2023-10-31T00:00:00Z",
            "epssProbability": 64.5,
            "epssPercentile": 97.6,
            "epssSeverity": "CRITICAL",
            "publishDate": "2023-10-10T14:15:00Z",
            "fixPublishDate": "2023-11-01T09:16:52Z",
            "gracePeriodEnd": null,
            "gracePeriodRemainingHours": null
          }
        ],
        "detectionMethod": "LIBRARY",
        "layerMetadata": null,
        "failedPolicyMatches": []
      }
    ],
    "applications": null,
    "cpes": null,
    "secrets": null,
    "dataFindings": null,
    "failedPolicyMatches": [
      {
        "policy": {
          "id": "ad519454-72e6-438f-8c01-1d2e14a161c3",
          "name": "Default vulnerabilities policy",
          "description": "Default built-in policy",
          "type": "VULNERABILITIES",
          "builtin": true,
          "projects": null,
          "policyLifecycleEnforcements": [
            {
              "enforcementMethod": "AUDIT",
              "deploymentLifecycle": "ADMISSION_CONTROLLER",
              "enforcementConfig": null
            },
            {
              "enforcementMethod": "BLOCK",
              "deploymentLifecycle": "CLI",
              "enforcementConfig": null
            }
          ],
          "ignoreRules": null,
          "params": {
            "__typename": "cicdscanpolicyparamsvulnerabilities",
            "severity": "CRITICAL",
            "packageCountThreshold": 1,
            "ignoreUnfixed": true,
            "packageAllowList": [],
            "detectionMethods": null,
            "fixGracePeriodHours": 0,
            "publishGracePeriodHours": 0
          }
        }
      }
    ],
    "analytics": {
      "vulnerabilities": {
        "criticalCount": 1,
        "highCount": 6,
        "mediumCount": 12,
        "lowCount": 1,
        "infoCount": 0,
        "unfixedCount": 0,
        "totalCount": 0
      },
      "secrets": {
        "cloudKeyCount": 0,
        "gitCredentialCount": 0,
        "dbConnectionStringCount": 0,
        "privateKeyCount": 0,
        "passwordCount": 0,
        "saasAPIKeyCount": 0,
        "totalCount": 0
      },
      "filesScannedCount": 1,
      "directoriesScannedCount": 1
    }
  },
  "reportUrl": "https://app.wiz.io/reports/cicd-scans#~(cicd_scan~'8001c795-c694-41e6-b119-bb60ade36fcf)"
}
